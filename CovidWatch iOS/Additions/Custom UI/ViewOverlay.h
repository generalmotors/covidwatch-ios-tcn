/*******************************************************************************
 * IoGViewOverlay.h
 *
 * Title:			IoGViewOverlay
 * Description:		View Overlay Slider UI Enhancement
 *						This file contains the template for the enhancement's
 *						single implementation file
 * Author:			Eric Crichlow
 * Version:			1.0
 ********************************************************************************
 *	08/30/15		*	EGC	*	File creation date
 *******************************************************************************/

#import <UIKit/UIKit.h>

#define IoGViewOverlayTabOutset						30			// Height of the "tab" part of the view
#define IoGViewOverlayEnclosingViewAlpha			1.0			// Opaqueness of background view that the "tab" and content view sit on top of. Only matters if that view's background color is changed from Clear
#define IoGViewOverlayContentViewAlpha				0.95		// Opaqueness of the view containing the content, which comprises an area including everything except the "tab"
#define IoGViewOverlayButtonAlpha					0.8			// Opaqueness of the "tab" button
#define IoGViewOverlaySpaceBetweenHorizontalTabs	30			// Margin between horizontally placed "tab" buttons
#define IoGViewOverlaySpaceBetweenVerticalTabs		60			// Margin between veretically placed "tab" buttons
#define IoGViewOverlayDrawerSlideAnimationDuration	0.5			// Time taken for "drawer" to slide out
#define IoGViewOverlayGridItemBorderPercentage		0.2			// How much of the content area to devote to item borders when in grid mode
#define IoGViewOverlayGridItemLabelPercentage		0.25		// Percentage of image item height to make the text label, if it exists

// If "tabs" are set on intersecting corners, they will overlap and the "tab" created last will get precedence in the overlapping space
typedef NS_ENUM(NSInteger, ViewOverlayTabPosition)
{
	ViewOverlayTabPositionTopEdgeLeft,
	ViewOverlayTabPositionTopEdgeCenter,
	ViewOverlayTabPositionTopEdgeRight,
	ViewOverlayTabPositionLeftEdgeTop,
	ViewOverlayTabPositionLeftEdgeCenter,
	ViewOverlayTabPositionLeftEdgeBottom,
	ViewOverlayTabPositionBottomEdgeLeft,
	ViewOverlayTabPositionBottomEdgeCenter,
	ViewOverlayTabPositionBottomEdgeRight,
	ViewOverlayTabPositionRightEdgeTop,
	ViewOverlayTabPositionRightEdgeCenter,
	ViewOverlayTabPositionRightEdgeBottom
};

typedef NS_ENUM(NSInteger, ViewOverlayType)
{
	ViewOverlayTypeList,
	ViewOverlayTypeGrid,
	ViewOverlayTypeFreeForm
};

@protocol OverlayViewCallbackDelegate <NSObject>

- (void)overlayViewDisplayed:(NSString *)title;
- (void)overlayViewContracted:(NSString *)title;

@end

@interface ViewOverlay : UIView <UITableViewDataSource, UITableViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout>
{
	NSMutableArray				*itemList;						// An array of dictionaries, containing information for the items to be displayed either in list format or grid format, in the overlay
																// List-type dictionaries are expected to be in the format of: "item":NSString, "target":id, "selector":NSString, where "selector" is generated by calling NSStringFromSelector
																// Grid-type dictionaries are expected to be in the format of: "image":UIImage, "label":NSString (optional), "target":id, "selector":NSString, where "selector" is generated by calling NSStringFromSelector
																// Each callback selector includes one parameter for a passed-back dictionary in the format of: "item":id, "index":NSNumber, where "item" corresponds to the triggering item and "index" is the index of that item in the itemList
}
@property (readonly, assign, nonatomic) ViewOverlayTabPosition position;
@property (readonly, assign, nonatomic) ViewOverlayType contentType;
@property (readonly, assign, nonatomic) NSString *tabTitle;		// Text for the button that will be used as the "tab" for revealing and concealing the overlay
@property (strong, nonatomic) UIView *contentView;				// Container for the content to be displayed in the overlay
@property (strong, nonatomic) UIColor *tabBackgroundColor;		// Color for background of the button used to make the "tab"
@property (strong, nonatomic) UIColor *tabTitleColor;			// Color for the text for the button used to make the "tab"
@property (strong, nonatomic) UIColor *contentBackgroundColor;	// Color for background of the content area for the overlay
@property (strong, nonatomic) UIColor *contentForegroundColor;	// Color for textual items in the content area for the overlay
@property (assign, nonatomic) int itemsPerRow;					// If overlay is of type IoGViewOverlayTypeList, the number of items to place in each row
@property (weak, nonatomic) id<OverlayViewCallbackDelegate> delegate;	// Delegte object that gets called back when the overlay view shows and hides
- (id)initForParentViewController:(UIViewController *)parent withPosition:(ViewOverlayTabPosition)placement contentType:(ViewOverlayType)contentType andTitle:(NSString *)title;
- (void)addItem:(NSDictionary *)overlayItem;					// A dictionary containing the representation (string or image) to display for the item, the target object to be called on selection and the selector to call on that target
- (void)addItems:(NSArray *)items;								// An array of dictionaries conforming to the format described for "addItem"
- (void)show;													// Display tab on parent view
- (void)hide;													// Hide tab on parent view
- (void)toggleOverlayReveal;									// Manually toggle the revealed state of the overlay
- (void)reveal;													// Manually reveal the overlay if it's not already revealed
- (void)conceal;												// Manually conceal the overlay if it's not already concealed
@end
